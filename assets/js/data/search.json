[ { "title": "Smart Contract Reader for Ethereum blockchain", "url": "/posts/smart-contract-reader/", "categories": "Web Development, Smart Contract Reader", "tags": "üî•React, üî•Solidity", "date": "2023-08-11 00:00:00 -0400", "snippet": "App demohttps://erc.adriannyc.devERC20 Faucet React Project with Thirdweb FrameworkThis repository contains the source code for a project written with React and Thirdweb framework.The project is hosted on GitHub Pages under my private domain.Link to Project source code OverviewThe project is built with React, a popular JavaScript library for building user interfaces.It utilizes the Thirdweb framework to interact with smart contracts, enabling seamless integration with blockchain functionalities. RequirementsTo interact with this project, you‚Äôll need to have a MetaMask wallet installed on your browser.MetaMask is a popular Ethereum wallet extension that allows you to manage your Ethereum accounts and interact with blockchain applications. Important NotesThis project‚Äôs ERC20 contract lives on the Ethereum Testnet blockchain Mumbai.While the contract is considered safe for use, I recommend being cautious and not interacting with other contracts until all potential bugs are corrected. Features Uses hooks and custom CSS to render a modern and user-friendly UI. Uses hooks and custom CSS to render a modern and user-friendly UI. Utilizes Thirdweb framework to interact with smart contracts on the Ethereum Test blockchain. Custom-written ERC20 contract implementation for token functionality. Enable interaction with my ERC-20 implementation, though other token contracts may also be used. Developed with React, leveraging React hooks and custom CSS for user-friendly UI rendering. Installation and DeploymentTo use this repository, follow the steps below:Clone the repository and navigate to the project directory:git clone https://github.com/adrianmnh/erc20-faucet/tree/mainBranchcd erc20-faucetInstall the required dependencies:npm installRun the project locally:npm run startFor production deployment:npm run buildnpm run deploy -- -m \"Custom commit message for gh-pages repo\"Notes: The gh-pages module has an index.js file that contains a list of exports. In this file, you‚Äôll find branch and remote keys. Make sure to configure the remote value to match the name of the remote repository where your source code resides (e.g., ‚Äúorigin‚Äù or a custom name).Thank you for checking out this project! If you have any questions or issues, feel free to reach out." }, { "title": "FastCart - Food Delivery App for iOS", "url": "/posts/FastCart-v1/", "categories": "Mobile App Development, Swift UIStoryboard, Databases, Facebook Authentication", "tags": "üî•Swift Programming Language, iOS Development, django framework, stripe, Xcode, PostgreSQL", "date": "2022-12-29 00:00:00 -0500", "snippet": "objectiveThe aim of our application is to provide local businesses with an online presence, enabling them to reach out to their customers during the mid-stages of the pandemic. This was achieved by creating FastCart, a food delivery app with a web management system built on several technologies and frameworks.source code and readme: Project Repohow to useTo use FastCart, restaurant owners register on the website by creating a login and verifying their account. They then input information regarding their restaurant, including menus, beverages, combination platters, and pricing. The option to upload an image for each menu item is also provided.Customers can easily create an account using Facebook authentication and begin browsing restaurants within their proximity. Once a restaurant is selected, customers can add items to their cart, change quantities, and proceed to payment. Orders created are submitted and given a pending status.On the restaurant side, once an order is received, the restaurant manager approves the order, changing its status to in progress or canceled. When the order is ready for delivery, the status is changed to ready, at which point a driver can pick up the order and deliver it to the customer. Once the order is delivered, the status is changed to completed.backgroundFastCart was developed using Xcode to create an iOS user interface in the Swift programming language, and Django, a Python framework, to create the backend server for the website and API. The object-oriented relational database PostgreSQL was used to store data, while Heroku, a Platform-as-a-Service, was utilized to host the website. In addition, AWS S3 was used to store assets uploaded by business owners, Facebook API was used for user authentication, and Stripe was used for payment processing.It is important to note that the user interface of the iOS application is different for customers and drivers, while the website is exclusively for restaurant owners.credits to: Orlando Vargas Fernando Gonzales" }, { "title": "Compression and Decompression via Distance Transform", "url": "/posts/DistanceTransformCompression/", "categories": "Image Processing, Skeleton Compression Algorithm", "tags": "üî•C++ Programming Language, Binary Image", "date": "2022-11-02 00:00:00 -0400", "snippet": "ObjectiveGiven a binary image, the objective is to produce a loss-less compression via the skeleton of 8-connectness distance transform.To ensure correctness, a decompression algorithm is used on the compressed file. Project PDF source code and algorithmsusage Create a new folder Download main.cpp and binary images in text format Run the following commandsg++ main.cpp -o main.exe./main.exe img1./main.exe img2 Link to Project repo " }, { "title": "Threshold Selection", "url": "/posts/ThresholdSelection/", "categories": "Image Processing, Thresholding Algorithm", "tags": "üî•C++ Programming Language, Histogram", "date": "2022-10-02 00:00:00 -0400", "snippet": "ObjectiveTo take an image‚Äôs histogram from a text file and find the best threshold using the Gaussian automatic threshold selection method.This process yields a Gaussian function which is graphed along with the histogram, and the best threshold on the output files Project PDF source code and algorithmsusage Create a new folder Download main.cpp and data files Run the following commandsg++ main.cpp -o main.exe./main.exe image_histogram1.txt outFile1_1.txt outFile1_2.txt./main.exe image_histogram2.txt outFile2_1.txt outFile2_2.txt Link to Project repo " }, { "title": "eMovies Model Transformation", "url": "/posts/eMoviesRework/", "categories": "Data Analytics, Data Modeling a Movie Streaming", "tags": "Data Modeling, erwin Data Modeler, Physical Data Model, Conceptual Data Model, Logical Data Model, SQL Server, Quest Software", "date": "2022-09-25 15:02:00 -0400", "snippet": "backgroundeMovies is a data model provided by Quest‚Äôs ERwinDM sample with Logical and Physical models that describe an outdated Movie rental service.The purpose of this project is to rework the models into a modern format More on Quest‚Äôs eMovies and data models Features of my Models Includes a Conceptual Model Includes a Logical Model Includes a Physical Model Includes views to facilitate database usage Multi-dimensional model layers to caputure how the business works by precisely representing business rules Model represents Navigation by capturing how the business is monitored Multiple bridge tables allow multi-value attributes PDM Tables are Normalized to 3rd normal form (3NF) User defined domains for all attributes Default values for non null attributes Constraints for attributes Different methods of payments, multi payment featuremodel demo Link to Project repoConceptual Data Model without Payment entitiesLogical Data Model with multi-payment methodsPhysical Data Model with Attributes and Columns" }, { "title": "CUNYfirst Automated Course Registration(for Windows)", "url": "/posts/AutomatedCourseRegistrating/", "categories": "Web Scraping, Windows Command Line Application", "tags": "üî•Python Programming Language, Selenium, Windows cmd, PowerShell", "date": "2022-01-25 00:00:00 -0500", "snippet": "depracated after Fall 2022 : CUNYfirst 9.2 Upgradeusage download the contents of this project repo create a virtualenv to prevent clashes with user environment on the command-line: pip3 install -r requirements.txt once all dependencies have been installed: python _src\\driver.py Follow the prompts on screen*This project does not store any user data outside of local environmentsource code move to project RepobackgroundDuring the fall of 2021, many students at Queens College complained about issues encountered in CUNYFirst during course registration, particularly for high-level courses required to graduate with a bachelor‚Äôs degree.As a computer science major, I found myself in the same predicament, unable to register for the high-level CS electives I really wanted and being forced to settle with the less desirable ones. The CS department was unable to offer over-tallies, so I resorted to other tools such as the Coursicle app, which sends notifications for courses being tracked (up to one with the free subscription) and pings every single user tracking the course that the classroom has at least one ‚Äúopen‚Äù seat vacancy.At this point, I assume a number upward of 10 users would rush to their browsers and open their saved CUNYFirst bookmarks with the desired courses and try to send requests to the CUNY servers to register for the course(s) selected.From the moment the notification is sent and received, the amount of time needed to proceed with the process of adding or swapping courses takes at least a minute, depending on the Coursicle app‚Äôs way of handling these events.I received so many of these ‚Äúpings‚Äù, dropped everything I was doing to re-register, and found myself disappointed every single time. The rollercoaster of emotions was extremely frustrating, but I found a way to channel them and got inspired to build this project." }, { "title": "Tip Calculator for iOS", "url": "/posts/TipCalculator/", "categories": "App Development, iOS Storyboard UI", "tags": "üî•Swift Programming Language, iOS Development, Xcode", "date": "2021-09-30 00:00:00 -0400", "snippet": "Tip Calculator is an iOS app created to help estimate the gratuity for waitstaff when dining out.How to Install:TipCalculator is not in the Apple AppStore. To use it, you‚Äôll need Xcode installed in mac desktop or laptop, and the iOS device you want to use it on. Clone the contents of this github repo on to a blank folder Open Xcode, navigate to the location of the project folder, and open the workspace file Connect your iOS device via cable to mac, Xcode will recognize the iOS device Select the iOS Device from the top-center drop-down list Press runUsageUser can enter a bill amount, choose a tip percentage, and see the tip and total values.User can select between tip percentages by tapping different values on the segmented control and the tip value is updated accordinglyFeatures Split the bill x-ways Tip percentages may be adjusted Settings are stored after app restarts and/or is closed Settings can be reset back to defaults Features dark/light mode on settings screenLink to Project source codeCopyright [2021] [Adrian Noa]Licensed under the Apache License, Version 2.0 (the \"License\");you may not use this file except in compliance with the License.You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an \"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License." } ]
